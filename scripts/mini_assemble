#!/bin/bash
set -e

usage="$(basename "$0") [-h] -i <fastq>

Assemble fastq/fasta formatted reads and perform POA consensus.

    -h  show this help text.
    -i  fastx input reads (required).
    -q  use qualities as is (default: false).
    -r  reference fasta for reference-guided consensus (instead of de novo assembly)
    -o  output folder (default: assm).
    -p  output file prefix (default: reads).
    -t  number of minimap and racon threads (default: 1).
    -m  number of racon rounds (default: 4).
    -n  number of racon shuffles (default: 1).
    -c  trim adapters from reads prior to everything else.
    -e  error correct longest e% of reads prior to assembly."

OUTPUT="assm"
NAME="reads"
THREADS=1
ROUNDS=4
SHUFFLES=1
USEQUAL=false
CHOP=false
iflag=false
rflag=false
eflag=false
while getopts ':hi:q:r:o:p:t:m:n:ce:' option; do
  case "$option" in
    h  ) echo "$usage" >&2; exit;;
    i  ) iflag=true; INPUT=$OPTARG;;
    q  ) USEQUAL=true;;
    r  ) rflag=true; REF=$(cd "$(dirname "$OPTARG")"; pwd)/$(basename "$OPTARG");;
    o  ) OUTPUT=$OPTARG;;
    p  ) NAME=$OPTARG;;
    t  ) THREADS=$OPTARG;;
    m  ) ROUNDS=$OPTARG;;
    n  ) SHUFFLES=$OPTARG;;
    c  ) CHOP=true;;
    e  ) eflag=true; ERRCORR=$OPTARG;;
    \? ) echo "Invalid option: -${OPTARG}." >&2; exit 1;;
    :  ) echo "Option -$OPTARG requires an argument." >&2; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if ! $iflag; then
  echo "$usage" >&2;
  echo "-i must be specified." >&2;
  exit 1;
fi

if [[ ! -e ${OUTPUT} ]]; then
  mkdir -p ${OUTPUT}
else
  echo "Output ${OUTPUT} already exists." >&2; exit 1
fi

# Simple test for fastq
filename=$(basename "$INPUT")
ext="${filename##*.}"
if [ "$ext" = 'fq' ] || [ "$ext" = 'fastq' ]; then
  FASTX=${OUTPUT}/${NAME}.${ext}
  MOCKQ=10
  if ${USEQUAL}; then
    echo "Copying FASTQ input to workspace: ${INPUT} > ${FASTX}"
    cp ${INPUT} ${FASTX}
  else
    echo "Discarding quality values: ${INPUT} > ${FASTX}"
    cat ${INPUT} | fast_convert qq --discard_q --mock_q ${MOCKQ} > ${FASTX}
  fi
else
  FASTX=${OUTPUT}/${NAME}.${ext}
  echo "Copying FASTA input to workspace: ${INPUT} > ${FASTX}"
  cp ${INPUT} ${FASTX}
fi

cd ${OUTPUT}
READS=$(basename "$FASTX")

if $CHOP; then
  echo "Trimming reads..."
  TRIMMED=${NAME}_trimmed.${ext}
  porechop -i ${READS} -o ${TRIMMED} --threads ${THREADS} --check_reads 1000 --discard_middle
  READS=${TRIMMED}
else
  echo "Skipped adapter trimming."
fi

# Note, these could/should be made dependent on read correction
echo ${RACONOPTS:="-m 8 -x -6 -g -8"} > /dev/null
OVLOPTS="-x ava-ont"
ASMOPTS="-s 100 -e 3"

if $eflag; then
  echo "Extracting longest ${ERRCORR}% of reads..." 
  LONG_READS=long_${READS}
  OTHERS=other_${READS}
  long_fastx ${READS} ${LONG_READS} --longest ${ERRCORR} --others ${OTHERS}

  echo "Correcting long reads..."
  LONG_PAF=long_corr.paf
  LONG_READ_CORR=corr_${LONG_READS}
  minimap2 ${OVLOPTS} -t${THREADS} ${LONG_READS} ${READS} > ${LONG_PAF}
  racon ${RACONOPTS} -t ${THREADS} -f -q -1 ${READS} ${LONG_PAF} ${LONG_READS} > ${LONG_READ_CORR}

  echo "Collating corrected long reads and remaining reads..."
  CORR_READS=${NAME}_corrected.fq
  cat ${LONG_READ_CORR} | fast_convert aq --mock_q ${MOCKQ} | cat - ${OTHERS} > ${CORR_READS}
  READS=${CORR_READS}
else
  echo "Skipped pre-assembly correction." 
fi

if ! $rflag; then 
  echo "Overlapping reads..."
  minimap2 ${OVLOPTS} -t${THREADS} ${READS} ${READS}| gzip -1 > ${NAME}.paf.gz
  echo "Assembling graph..."
  miniasm ${ASMOPTS} -f ${READS} ${NAME}.paf.gz | tee ${NAME}.gfa | awk '/^S/{print ">"$2"\n"$3}' > ${NAME}.gfa.fasta
  DRAFT=${NAME}.gfa.fasta
else
  echo "Using supplied reference to perform reference-guided consensus."
  DRAFT=${REF}
fi

for SHUF in $(seq 1 ${SHUFFLES}); do
  echo "Running racon read shuffle ${SHUF}..."
  SCAFFOLD=${DRAFT}
  if [ ${SHUF} -ne 1 ]; then
    echo "Shuffling reads..."
    SHUFREADS=shuffled_${SHUF}_${READS}
    seqkit shuffle $READS > ${SHUFREADS}
  else
    SHUFREADS=${READS}
    if [ ${SHUFFLES} -ne 1 ]; then
      ln -s ${READS} shuffled_${SHUF}_${READS}
    fi
  fi

  for ROUND in $(seq 1 ${ROUNDS}); do
    echo "Running round ${ROUND} consensus..."
    READS2TIGS=reads2contigs_${SHUF}_${ROUND}.paf
    NEWSCAF=racon_${SHUF}_${ROUND}.fasta

    minimap2 -t${THREADS} ${SCAFFOLD} ${SHUFREADS} > ${READS2TIGS}
    racon ${RACONOPTS} -t ${THREADS} -q -1 ${SHUFREADS} ${READS2TIGS} ${SCAFFOLD} > ${NEWSCAF}
    SCAFFOLD=${NEWSCAF}
  done

done


FINAL=${NAME}_final.fa
if [ ${SHUFFLES} -eq 1 ]; then
  sed 's/_C:.\+$//' ${SCAFFOLD} > ${FINAL}
else
  # One last compilation step
  echo "Combining consensus shuffles."
  COMBINED=racon_combined_shuffles.fasta
  for SHUF in $(seq 1 ${SHUFFLES}); do
    sed "s/_C:.\+$/_shuffle_${SHUF}/" racon_${SHUF}_${ROUNDS}.fasta >> ${COMBINED}
  done

  READS2TIGS=combined2contigs.paf
  minimap2 -t${THREADS} ${DRAFT} ${COMBINED} > ${READS2TIGS}
  racon ${RACONOPTS} -t ${THREADS} -q -1 ${COMBINED} ${READS2TIGS} ${DRAFT} > ${FINAL}
  sed -i 's/_C:.\+$//' ${FINAL}
fi
echo "Final assembly written to ${OUTPUT}/${FINAL}. Have a nice day."
